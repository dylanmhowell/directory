---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const { title = "The Photographer Directory", description = "Find the best photographer for your event." } = Astro.props;
---

<meta charset="UTF-8" />
<meta
  name="description"
  property="og:description"
  content={description}
/>
<meta
  name="viewport"
  content="width=device-width"
/>
<meta
  name="generator"
  content={Astro.generator}
/>
<title>{title}</title>

<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon.svg"
/>

<style>
  @font-face {
    font-family: "Public Sans";
    src: url("/fonts/Public-Sans-Regular.woff2") format("woff2");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: "Public Sans";
    src: url("/fonts/Public-Sans-Bold.woff2") format("woff2");
    font-weight: 700;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: "Public Sans";
    src: url("/fonts/Public-Sans-Italic.woff2") format("woff2");
    font-weight: 400;
    font-style: italic;
    font-display: swap;
  }
  @font-face {
    font-family: "Rubik";
    src: url("/fonts/Rubik-VariableFont_wght") format("ttf-variations");
    font-weight: 500 600;
    font-style: normal;
    font-display: swap;
  }
</style>
<!-- <link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/> -->

<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
  }
</script>
